# %%
import getml
from challenge.utils.data import load_ctu_dataset

getml.set_project("{{ project_name }}")

# %% [markdown]
# # Task: {{ dataset }}
# ### Dataset Description
# > <span style="font-weight: 500; color: #3b3b3b;">ⓘ️&nbsp; Generated by `gpt-4o`</span>
# >
# > {{ dataset_description.split("\n") | join("\n> ") }}
#
# ### Tables
# Population table: {{ population_name }}
#
# <h4>
#   <details open>
#      <summary>ER Diagram</summary>
#        <img src="{{ dataset_er_diagram_url }}" alt="{{ dataset }} ER Diagram">
#    </details>
# </h4>

# %% [markdown]
# To load the dataset, we use the `load_ctu_dataset` function from the `utils`
# module. This function returns a tuple with the population table as the first
# element and the a dictionary of peripheral tables as the second element.

# %%
{{ population_name }}, peripheral = load_ctu_dataset("{{ dataset }}")

(
    {{ peripheral_names | join(",\n    ") }},
) = peripheral.values()

# %% [markdown]
# Now, we can inspect all tables and annotate the columns with [roles](https://getml.com/latest/user_guide/concepts/annotating_data/).

# %% [markdown]
# The population table (`{{ population_name }}`). We already set the `target` role for the target (`{{ target_column }}`). If the task is a multiclass classification,
# we split the target column into multiple columns in an one-vs-all fashion. In this case, the original target is still avaiable as `{{ target_column }}`.

# %%
# TODO: Annotate remaining columns with roles
{{ population_name }}

# %% [markdown]
# Peripheral tables,

{% for table in peripheral_names %}
# %%
# TODO: Annotate columns with roles
{{ table }}
{% endfor %}

# %% [markdown]
# The next step is to define the data model. Refer to [https://relational.fel.cvut.cz/dataset/{{ dataset }}](https://relational.fel.cvut.cz/dataset/{{ dataset }})
# for a description of the dataset.

# %%
dm = getml.data.DataModel(population={{ population_name }}.to_placeholder())
dm.add(getml.data.to_placeholder(**peripheral))

# TODO
# dm.population.join(...)

# %% [markdown]
# Now we can create the container and add the tables to it.

# %%
container = getml.data.Container(population={{ population_name }}, split={{ population_name }}.split)
container.add(**peripheral)

container
