# %%
import getml
from challenge.utils.data import load_ctu_dataset

getml.set_project("relbench_challenge_{{ dataset }}")

# %% [markdown]
# # Task: {{ dataset }}
# ### Dataset Description
# > ⚠️ _Generated by `gpt-4o`_
# >
# > {{ dataset_description.split("\n") | join("\n> ") }}
#
# ### Tables
# Population table: {{ population_table_name }}
#
# <h4>
#   <details open>
#      <summary>ER Diagram</summary>
#        <img src="{{ dataset_er_diagram_url }}" alt="{{ dataset }} ER Diagram">
#    </details>
# </h4>

# %% [markdown]
# To load the dataset, we use the `load_ctu_dataset` function from the `utils`
# module. This function returns a tuple with the population table as the first
# element and the a dictionary of peripheral tables as the second element.

# %%
population, peripheral = load_ctu_dataset("{{ dataset }}")

(
    {{ peripheral_table_names | join(",\n    ") }},
) = peripheral.values()

# %% [markdown]
# Now we can inspect all tables and annotate the columns with [roles](https://getml.com/latest/user_guide/concepts/annotating_data/).

# %%
population

{% for table in peripheral_table_names %}
# %%
{{ table }}
{% endfor %}

# %% [markdown]
# The next step is to define the data model. Refer to [https://relational.fel.cvut.cz/dataset/{{ dataset }}](https://relational.fel.cvut.cz/dataset/{{ dataset }})
# for a description of the dataset.

# %%
# TODO


# %% [markdown]
# Now we can create the container and add the tables to it.

# %%
container = getml.data.Container(population=population, split=population.split)
container.add(**peripheral)

container
